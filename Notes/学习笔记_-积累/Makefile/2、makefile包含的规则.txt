Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2022-06-07T10:45:52+08:00

====== 2、makefile包含的规则 ======
Created 星期二 07 六月 2022

**规则主要分为2部分：依赖的关系  、 执行的命令**
	结构如下
		targets：prerequisites 
			command 
			
		或者是
		targets: prerequistes ; command
			command
	**说明：**
		targets：（要生成的文件）规则的目标，可以是Object File（一般称为中间文件），也可以是可执行文件，还可以是标签.
		prerequisite：是依赖文件，要生成targets需要的文件或者目标。可以没有，可以多个。
		command：make 需要执行的命令（任意shell命令）。可以多条，每条命令占一行。
		
		注意：目标和依赖文件之间要使用冒号隔开，命令的开始一定用TAB制表符，否则报错：缺少分隔符。
		
		**举个栗子:**
		__test : test.c__
			__gcc -o test test.c__

**makefie中，内容的五个部分**
	1) 显式规则
	显式规则说明了，如何生成一个或多的的目标文件。这是由 Makefile 的书写者明显指出，要生成的文件，文件的依赖文件，生成的命令。

	2) 隐晦规则
	由于我们的 make 命名有自动推导的功能，所以隐晦的规则可以让我们比较粗糙地简略地书写 Makefile，这是由 make 命令所支持的。
	
	3) 变量的定义
	在 Makefile 中我们要定义一系列的变量，变量一般都是字符串，这个有点像C语言中的宏，当 Makefile 被执行时，其中的变量都会被扩展到相应的引用位置上。

	4) 文件指示
	其包括了三个部分，一个是在一个 Makefile 中引用另一个 Makefile，就像C语言中的 include 一样；另一个是指根据某些情况指定 Makefile 中的有效部分，就像C语言中的预编译 #if 一样；还有就是定义一个多行的命令。有关这一部分的内容，我会在后续的部分中讲述。
	
	5) 注释
	Makefile 中只有__行注释__，和 UNIX 的 Shell 脚本一样，__其注释是用“#”字符__，这个就像 C/C++ 中的“//”一样。如果你要在你的 Makefile 中使用“#”字符，可以用反斜框进行转义，如：“\#”。
	




